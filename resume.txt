Simple To Do List app using the PERN stack

P -> PostgresSQL    : object-oriented relational DB management system
E -> Express js     : backend framework for builing app on top of Node js
R -> React js       : frontend framework
N -> Node js        : envirorment to power the app  

Purpose of this exercise, understand what is happening between the front and the backend on a simple CRUD 

So, long story short...
In the front end, users can create, delete and update their To Do List, and the data will be rendered back to them to see it 

Any time the "submit" (edit, or delete) button is clicked, what is really happening is there is a HTTP request being sended to an restful API (that depending of the button, the request, and therfore the route of that request). This one, will take this requests, then its going to instruct the DB what kind of operation must be done (this via controllers in our server). 

So the important piece here is the restful API, it uses transfer protocols to run CRUD operations on the DB, it DOENSÂ´T CRUD but holds the instruction for the DB to CRUD (important detail)

BACKEND_________________________________________
creating server
    mkdir server
    cd server
    npm init -y 
    npm install  *** Libraries ***      *** What for ***
                --> express:            allows to create quickly create a server
                --> cors:               allows different domains app to interact each other (server will run on 
                                        localhost:3000 and react will be running on 5000 )
                --> pg:                 connects our server with our db and run PostgresSQL queries
                --> sequelize:          ORM (object relational mapping), allows working with db under OOP paradigm (object and
                                        clases instead "pure tables")
                --> dotenv:             Allows set envirorment variables
                --> morgan:             Shows queries made on console 
                --> nodemon -D:         restart the node app when it listens changes made 
                --> sequelize-autp -d:  imports secuential models already defined into a directoryhi


npx sequelize-auto -0 "./src/modes" -d db_name -h localhost -u user -x password -p 5432 -e postgres -l esm --cascadeModel p 


FRONTEND________________________

npm create vite@latest client -- --template react 

cd client
npm install
npm run dev 

(frontend on port 5173 by default)



npm install ***Libraries***
            --> react-router-dom :      enables routing in React applications, allowing navigation between 
                                        different views without page reloads

            --> @mui/material:          Elments already stilized as components for react. Docs at https://mui.com/

            --> @mui/icons-material:    Use the font Icon component or the prebuilt SVG Material Icons     

npm list react-router-dom   --> version of react-router-dom    

*** IMPORTANT ***
    In Material UI, inputs recive another name, they are named as "TextFields"




